{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "https://raw.githubusercontent.com/ScratchAddons/manifest-schema/master/1/1.10.json",
	"title": "Scratch Addons addon manifest",
	"description": "The manifest that describes an addon.",
	"type": "object",
	"definitions": {
		"cssManipulator": {
			"type": "object",
			"description": "The value manipulator.",
			"oneOf": [
				{
					"properties": {
						"type": {
							"type": "string",
							"description": "The type of the manipulator.",
							"const": "settingValue"
						},
						"settingId": {
							"type": "string",
							"description": "The setting ID to reference."
						}
					},
					"required": ["settingId"]
				},
				{
					"properties": {
						"type": {
							"type": "string",
							"description": "The type of the manipulator.",
							"const": "textColor"
						},
						"source": {
							"type": "object",
							"description": "The source to manipulate.",
							"$ref": "#/definitions/cssManipulator"
						},
						"threshold": {
							"type": "number",
							"minimum": 0, "$comment": "TODO: Clarify this"
						},
						"black": {
							"type": "string",
							"description": "The value for black text."
						},
						"white": {
							"type": "string",
							"description": "The value for black text."
						}
					},
					"required": ["source", "black", "white"]
				},
				{
					"properties": {
						"type": {
							"type": "string",
							"description": "The type of the manipulator.",
							"const": "multiply"
						},
						"source": {
							"type": "object",
							"description": "The source to manipulate.",
							"$ref": "#/definitions/cssManipulator"
						},
						"r": {
							"type": "number",
							"description": "The red value of the color.",
							"default": 1,
							"minimum": 0
						},
						"g": {
							"type": "number",
							"description": "The green value of the color.",
							"default": 1,
							"minimum": 0
						},
						"b": {
							"type": "number",
							"description": "The blue value of the color.",
							"default": 1,
							"minimum": 0
						},
						"a": {
							"type": "number",
							"description": "The alpha/opacity value of the color.",
							"default": 1,
							"minimum": 0
						}
					},
					"required": ["source"]
				},
				{
					"properties": {
						"type": {
							"type": "string",
							"description": "The type of the manipulator.",
							"const": "brighten"
						},
						"source": {
							"type": "object",
							"description": "The source to manipulate.",
							"$ref": "#/definitions/cssManipulator"
						},
						"r": {
							"type": "number",
							"description": "The red value of the color.",
							"default": 1,
							"minimum": 0
						},
						"g": {
							"type": "number",
							"description": "The green value of the color.",
							"default": 1,
							"minimum": 0
						},
						"b": {
							"type": "number",
							"description": "The blue value of the color.",
							"default": 1,
							"minimum": 0
						},
						"a": {
							"type": "number",
							"description": "The alpha/opacity value of the color.",
							"default": 1,
							"minimum": 0
						}
					},
					"required": ["source"]
				}
			],
			"required": ["type"]
		},
		"matches": {
			"oneOf": [
				{
					"type": "string",
					"description": "A match rule for any URL on Scratch origin. The script will execute will execute in all pages.",
					"const": "*"
				},
				{
					"type": "string",
					"description": "A RegEx match rule. Patterns starting with https will be treated as an absolute RegEx pattern, and patterns that don't start will be treated as an relative RegEx pattern.", 
					"pattern": "^\\^"
				},
				{
					"type": "array",
					"description": "An array that contains match rules. The script will execute if it matches any of the rules.",
					"items": {
						"oneOf": [
							{
								"type": "string",
								"description": "A RegEx match rule. Patterns starting with https will be treated as an absolute RegEx pattern, and patterns that don't start will be treated as an relative RegEx pattern.", 
								"pattern": "^\\^"
							},
							{
								"type": "string",
								"description": "A match rule shortcut.",
								"enum": ["projects",
									"projectEmbeds", "studios", "studioComments", "profiles", "topics", "newPostScreens", "editingScreens", "forums", "scratchWWWNoProject"]
							},
							{
								"type": "string",
								"description": "A match rule shortcut matcher.",
								"enum": ["isNotScratchWWW"]
							},
							{
								"type": "string",
								"description": "A URL match rule.",
								"pattern": "^https://", "$comment": "TODO: Clarify this. This seemed only for absolute patterns. Is the relative is on the top?"
							}
						]
					},
					"minItems": 1
				}
			]
		}
	},
	"properties": {
		"$schema": {
			"type": "string",
			"description": "The URL to the schema."
		},
		"name": {
			"type": "string",
			"description": "The name of the addon. Don't make it too long.",
			"minLength": 1
		},
		"description": {
			"type": "string",
			"description": "The description of the addons. Any credits and attributions also belong here.",
			"minLength": 1
		},
		"tags": {
			"type": "array",
			"description": "Tags which are used for filtering and badges on the Scratch Addons settings page.",
			"items": {
				"type": "string",
				"description": "A tag.",
				"enum": [
					"community",
					"editor",
					"popup",
					"theme",
					"beta",
					"danger",
					"recommended",
					"forums",
					"easterEgg",
					"codeEditor",
					"costumeEditor",
					"projectPlayer",
					"editorMenuBar",
					"projectPage",
					"profiles",
					"studios",
					"comments"
				]
			},
			"contains": {
				"enum": [
					"community",
					"editor",
					"popup"
				]
			},
			"minItems": 1
		},
		"permissions": {
			"type": "array",
			"description": "You can specify permissions by providing a \"permissions\" array.",
			"items": {
				"type": "string",
				"description": "A permission.",
				"enum": ["notifications", "badge", "clipboardWrite"]
			},
			"minItems": 1
		},
		"persistentScripts": {
			"type": "array",
			"description": "You can add persistent scripts by providing a \"persistentScripts\" array conformed of JS files (e.g. [\"example.js\"]).",
			"items": {
				"type": "string",
				"description": "The path to the persistent script.",
				"pattern": "\\.js$"
			},
			"minItems": 1
		},
		"userscripts": {
			"type": "array",
			"description": "You can add userscripts by providing a \"userscripts\" array.\nUnlike persistent scripts, this is an array of objects, not strings.\nEach object must specify the url to the userscript through the \"url\" property, and provide an array of URL matches.",
			"items": {
				"type": "object",
				"properties": {
					"url": {
						"type": "string",
						"description": "The path to the userscript.",
						"pattern": "\\.js$"
					},
					"matches": {
						"$ref": "#/definitions/matches"
					},
					"runAtComplete": {
						"type": "boolean",
						"description": "Determines whether the addon should be run after the document is complete loading."
					},
					"settingMatch": {
						"type": "object",
						"description": "You can provide a \"settingMatch\" object that will result in your userscript/userstyle only running if the specified setting is set to the specified value.",
						"properties": {
							"id": {
								"type": "string",
								"description": "The identifier of the setting."
							},
							"value": {
								"type": ["boolean", "integer", "string"],
								"description": "The value of the setting."
							}
						}
					}
				},
				"required": ["url", "matches"],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"userstyles": {
			"type": "array",
			"description": "Similarly to userscripts, you can specify a \"userstyles\" array.\nEach object must specify the url to the stylesheet through the \"url\" property, and provide an array of URL matches.",
			"items": {
				"type": "object",
				"properties": {
					"url": {
						"type": "string",
						"description": "The path to the userstyle.",
						"pattern": "\\.css$"
					},
					"matches": {
						"$ref": "#/definitions/matches"
					},
					"settingMatch": {
						"type": "object",
						"description": "You can provide a \"settingMatch\" object that will result in your userscript/userstyle only running if the specified setting is set to the specified value.",
						"properties": {
							"id": {
								"type": "string",
								"description": "The identifier of the setting.",
								"minLength": 1
							},
							"value": {
								"type": ["boolean", "integer", "string"],
								"description": "The value of the setting.",
								"minLength": 1
							}
						}
					}
				},
				"required": ["url", "matches"],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"settings": {
			"type": "array",
			"description": "The \"settings\" object allow the addon's users to specify settings in Scratch Addons' settings panel. Inside your persistent scripts and userscripts, you can then access those settings with the \"addon.settings\" API.\nSpecify an \"settings\" property and provide an array of setting objects.",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the setting.",
						"minLength": 1
					},
					"id": {
						"type": "string",
						"description": "The identifier of the setting to get the specified value from your code.",
						"minLength": 1
					},
					"type": {
						"type": "string",
						"description": "The type of the setting",
						"enum": ["boolean", "positive_integer", "string", "select", "color", "integer"],
						"minLength": 1
					},
					"default": {
						"type": ["boolean", "integer", "string"],
						"description": "The default value of the setting.",
						"minLength": 1
					},
					"potentialValues": {},
					"min": {},
					"max": {},
					"allowTransparency": {}
				},
				"allOf": [
					{
						"if": {
							"properties": { 
								"type": { 
									"const": "select" 
								} 
							}
						},
						"then": {
							"properties": {
								"potentialValues": {
									"type": "array",
									"description": "The potential values for the select setting.",
									"items": {
										"type": ["string", "object"],
										"description": "A potential value for the select setting.",
										"allOf": [
											{
												"if": {
													"type": "string" 
												},
												"then": {
													"minLength": 1
												}
											},
											{
												"if": {
													"type": "object" 
												},
												"then": {
													"properties": {
														"name": {
															"type": "string",
															"description": "The name of the potential value.",
															"minLength": 1
														},
														"id": {
															"type": "string",
															"description": "The identifier of the potential value.",
															"minLength": 1
														}
													}
												}
											}
										]
									},
									"minItems": 1
								},
								"default": {
									"type": "string"
								}
							},
							"required": ["potentialValues"]
						}
					},
					{
						"if": {
							"properties": { 
								"type": { 
									"const": "boolean" 
								} 
							}
						},
						"then": {
							"properties": {
								"default": {
									"type": "boolean"
								}
							}
						}
					},
					{
						"if": {
							"properties": { 
								"type": { 
									"const": "positive_integer" 
								} 
							}
						},
						"then": {
							"properties": {
								"default": {
									"type": "integer",
									"minimum": 0
								}
							}
						}
					},
					{
						"if": {
							"properties": { 
								"type": { 
									"const": "string" 
								} 
							}
						},
						"then": {
							"properties": {
								"default": {
									"type": "string",
									"minLength": 1
								}
							}
						}
					},
					{
						"if": {
							"properties": { 
								"type": { 
									"const": "color" 
								} 
							}
						},
						"then": {
							"properties": {
								"default": {
									"type": "string",
									"pattern": "^#([0-9a-fA-F]{2}){1,4}$"
								},
								"allowTransparency": {
									"type": "boolean",
									"description": "Determines whether the transparency/opacity/alpha value can be changed when choosing a color"
								}
							}
						}
					},
					{
						"if": {
							"properties": {
								"type": {
									"const": "color"
								},
								"allowTransparency": { 
									"const": false 
								} 
							}
						},
						"then": {
							"properties": {
								"default": {
									"type": "string",
									"pattern": "^#([0-9a-fA-F]{2}){1,3}$"
								}
							}
						}
					},
					{
						"if": {
							"properties": { 
								"type": { 
									"const": "integer" 
								} 
							}
						},
						"then": {
							"properties": {
								"default": {
									"type": "integer"
								},
								"min": {
									"type": "integer",
									"description": "The minimum value of the integer."
								},
								"max": {
									"type": "integer",
									"description": "The maximum value of the integer."
								}
							}
						}
					}
				],
				"required": ["name", "id", "type", "default"],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"credits": {
			"type": "array",
			"description": "An array containing credits to the authors/contributors of the addon.",
			"items": {
				"type": "object",
				"description": "A credited author/contributor.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the credited person.",
						"minLength": 1
					},
					"link": {
						"type": "string",
						"description": "The link relevant to the credit.",
						"pattern": "^https?:\\/\\/?(?:[a-z0-9-]+\\.)*[0-9a-z_-]+(?:\\.[a-z]+)+\\/.*$"
					}
				},
				"required": ["name"],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"enabledByDefault": {
			"type": "boolean",
			"description": "You can provide the \"enabledByDefault\" property and set it to true. Its default value is false.\nKeep in mind, few addons will be enabled by default. If you want your addon to be enabled by default, please open a discussion issue.",
			"default": false
		},
		"traps": {
			"type": "boolean",
			"description": "Determines whether traps are needed to run the addon.",
			"default": false
		},
		"presets": {
			"type": "array",
			"description": "An array containing presets for settings.",
			"items": {
				"type": "object",
				"description": "A preset.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the preset.",
						"minLength": 1
					},
					"id": {
						"type": "string",
						"description": "The identifier of the preset.",
						"minLength": 1
					 },
					"description": {
						"type": "string",
						"description": "The description of the preset.",
						"minLength": 1
					 },
					"values": {
						"type": "object",
						"description": "An object containing preset values of the settings.",
						"patternProperties": {
							".": {
								"description": "The preset value of the setting.",
								"type": ["boolean", "integer", "string"]
							}
						}
					}
				},
				"required": ["name", "id", "values"],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"l10n": {
			"type": "boolean",
			"description": "Determines whether localization (l10n) files of the addon are loaded.",
			"default": false
		},
		"libraries": {
			"type": "array",
			"description": "An array of libraries that the addon uses",
			"items": {
				"type": "string",
				"description": "A library identifier.",
				"minLength": 1
			},
			"minItems": 1
		},
		"info": {
			"type": "array",
			"description": "An array of additional information (e.g. warnings, notices) about the addon.",
			"items": {
				"type": "object",
				"description": "Information about the addon.",
				"properties": {
					"type": {
						"type": "string",
						"description": "Type of the information.",
						"enum": ["warning", "notice"],
						"minLength": 1
					},
					"id": {
						"type": "string",
						"description": "ID of the information.",
						"minLength": 1
					},
					"text": {
						"type": "string",
						"description": "Text of the information.",
						"minLength": 1
					}
				},
				"required": ["type", "id", "text"],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"popup": {
			"items": {
				"type": "object",
				"description": "An object for the popup.",
				"properties": {
					"icon": {
						"type": "string",
						"description": "The path to the popup icon.",
						"minLength": 1
					},
					"name": {
						"type": "string",
						"description": "The name of the popup.",
						"minLength": 1
					},
					"fullscreen": {
						"type": "boolean",
						"description": "Determines whether to show the fullscreen button.",
						"default": false
					}
				},
				"minItems": 1,
				"required": ["icon", "name"]
			}
		},
		"dynamicDisable": {
			"type": "boolean",
			"description": "Determines whether the addon's scripts should be considered disabled when disabled as the page is running.",
			"default": false
		},
		"dynamicEnable": {
			"type": "boolean",
			"description": "Determines whether the addon's scripts should be considered enabled when enabled as the page is running.",
			"default": false
		},
		"injectAsStyleElt": {
			"type": "boolean",
			"description": "Determines whether the addon's userstyles should be injected as style elements rather than link elements.",
			"default": false
		},
		"updateUserstylesOnSettingsChange": {
			"type": "boolean",
			"description": "Determines whether the addon's userstyles should be removed and rematched to the new settings.",
			"default": false
		},
		"customCssVariables": {
			"type": "array",
			"description": "An array of CSS variables the addon defines.",
			"items": {
				"type": "object",
				"description": "A CSS variable.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the CSS variable.",
						"minLength": 1,
						"pattern": "^[\\w-]+$"
					},
					"value": {
						"type": "object",
						"$ref": "#/definitions/cssManipulator"
					}
				},
				"required": ["name", "value"]
			}
		},
		"versionAdded": {
			"type": "string",
			"description": "The version that introduced the addon.",
			"pattern": "^1\\.\\d+\\.\\d+$"
		}
	},
	"required": ["name", "description", "tags"],
	"additionalProperties": false
}
